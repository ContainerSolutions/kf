// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kf/pkg/kf/fake (interfaces: Deleter)

// Package fake is a generated GoMock package.
package fake

import (
	kf "github.com/GoogleCloudPlatform/kf/pkg/kf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// FakeDeleter is a mock of Deleter interface
type FakeDeleter struct {
	ctrl     *gomock.Controller
	recorder *FakeDeleterMockRecorder
}

// FakeDeleterMockRecorder is the mock recorder for FakeDeleter
type FakeDeleterMockRecorder struct {
	mock *FakeDeleter
}

// NewFakeDeleter creates a new mock instance
func NewFakeDeleter(ctrl *gomock.Controller) *FakeDeleter {
	mock := &FakeDeleter{ctrl: ctrl}
	mock.recorder = &FakeDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakeDeleter) EXPECT() *FakeDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *FakeDeleter) Delete(arg0 string, arg1 ...kf.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *FakeDeleterMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*FakeDeleter)(nil).Delete), varargs...)
}

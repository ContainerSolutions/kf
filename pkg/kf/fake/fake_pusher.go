// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kf/pkg/kf/fake (interfaces: Pusher)

// Package fake is a generated GoMock package.
package fake

import (
	kf "github.com/GoogleCloudPlatform/kf/pkg/kf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// FakePusher is a mock of Pusher interface
type FakePusher struct {
	ctrl     *gomock.Controller
	recorder *FakePusherMockRecorder
}

// FakePusherMockRecorder is the mock recorder for FakePusher
type FakePusherMockRecorder struct {
	mock *FakePusher
}

// NewFakePusher creates a new mock instance
func NewFakePusher(ctrl *gomock.Controller) *FakePusher {
	mock := &FakePusher{ctrl: ctrl}
	mock.recorder = &FakePusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FakePusher) EXPECT() *FakePusherMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *FakePusher) Push(arg0 string, arg1 ...kf.PushOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *FakePusherMockRecorder) Push(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*FakePusher)(nil).Push), varargs...)
}

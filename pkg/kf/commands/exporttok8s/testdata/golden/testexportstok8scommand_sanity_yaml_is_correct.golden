apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  creationTimestamp: null
  name: build-and-publish
spec:
  params:
  - description: The url of the source package.
    name: GITHUB_URL
    type: string
  tasks:
  - name: source-upload
    params:
    - name: url
      value: https://github.com/cloudfoundry-samples/test-app
    taskRef:
      name: clone-code
    workspaces:
    - name: output
      workspace: output
  - name: push
    params:
    - name: BUILDPACKS
      value: https://github.com/cloudfoundry/go-buildpack
    - name: RUN_IMAGE
      value: cloudfoundry/cflinuxfs3@sha256:5219e9e30000e43e5da17906581127b38fa6417f297f522e332a801e737928f5
    - name: BUILDER_IMAGE
      value: cloudfoundry/cflinuxfs3@sha256:5219e9e30000e43e5da17906581127b38fa6417f297f522e332a801e737928f5
    - name: SKIP_DETECT
      value: "true"
    - name: IMAGE_DESTINATION
      value: gcr.io/kf-source/testbuild
    runAfter:
    - clone-code
    taskSpec:
      metadata: {}
      params:
      - description: Ordered list of comma separated builtpacks to attempt.
        name: BUILDPACKS
        type: string
      - description: The run image apps will use as the base for IMAGE (output).
        name: RUN_IMAGE
        type: string
      - description: The image on which builds will run.
        name: BUILDER_IMAGE
        type: string
      - default: "false"
        description: Skip the detect phase
        name: SKIP_DETECT
        type: string
      - description: The destination of the image.
        name: DESTINATION
        type: string
      spec: null
      steps:
      - command:
        - /ko-app/installer
        image: ko://code.cloudfoundry.org/buildpackapplifecycle/installer
        name: copy-lifecycle
        resources: {}
        volumeMounts:
        - mountPath: /staging
          name: staging-tmp-dir
      - args:
        - -euc
        - |2

          echo "/staging/app /tmp/app" | xargs -n 1 cp -r /workspace/output/
          CF_STACK=cflinuxfs3 /workspace/builder \
            -buildArtifactsCacheDir=/tmp/cache \
            -buildDir=/tmp/app \
            -buildpacksDir=/tmp/buildpacks \
            -outputBuildArtifactsCache=/tmp/output-cache \
            -outputDroplet=/tmp/droplet \
            -outputMetadata=/tmp/result.json \
            "-buildpackOrder=$(inputs.params.BUILDPACKS)" \
            "-skipDetect=$(inputs.params.SKIP_DETECT)"
          cp -r /tmp/droplet /workspace/droplet

          cat << 'EOF' > /workspace/entrypoint.bash
          #!/usr/bin/env bash
          set -e

          if [[ "$@" == "" ]]; then
            exec /lifecycle/launcher "/home/vcap/app" "" ""
          else
            exec /lifecycle/launcher "/home/vcap/app" "$@" ""
          fi

          EOF
          chmod a+x /workspace/entrypoint.bash

          cat << 'EOF' > /workspace/Dockerfile
          FROM $(inputs.params.RUN_IMAGE)
          COPY launcher /lifecycle/launcher
          COPY entrypoint.bash /lifecycle/entrypoint.bash
          WORKDIR /home/vcap
          USER vcap:vcap
          COPY droplet droplet.tar.gz
          RUN tar -xzf droplet.tar.gz && rm droplet.tar.gz
          ENTRYPOINT ["/lifecycle/entrypoint.bash"]
          EOF
        command:
        - bash
        image: $(inputs.params.BUILDER_IMAGE)
        name: run-lifecycle
        resources: {}
        volumeMounts:
        - mountPath: /staging
          name: staging-tmp-dir
      - args:
        - --dockerfile
        - /workspace/Dockerfile
        - --context
        - /workspace
        - --destination
        - $(inputs.params.IMAGE_DESTINATION)
        - --oci-layout-path
        - /tekton/home/image-outputs/IMAGE
        - --single-snapshot
        - --no-push
        - --tarPath
        - /workspace/image.tar
        command:
        - /kaniko/executor
        image: gcr.io/kaniko-project/executor:latest
        name: build
        resources: {}
        volumeMounts:
        - mountPath: /cache
          name: cache-dir
        - mountPath: /workspace/staging
          name: staging-tmp-dir
        workingDir: /workspace
      - args:
        - publish
        - $(inputs.params.IMAGE_DESTINATION)
        - /workspace/image.tar
        command:
        - /ko-app/build-helpers
        image: gcr.io/kf-releases/build-helpers-58e723758a11c5e698f0be6f53cdecbc:latest
        name: publish
        resources: {}
        workingDir: /workspace
      volumes:
      - emptyDir: {}
        name: cache-dir
      - emptyDir: {}
        name: staging-tmp-dir
      workspaces:
      - name: output
    workspaces:
    - name: output
      workspace: output
  workspaces:
  - name: output
